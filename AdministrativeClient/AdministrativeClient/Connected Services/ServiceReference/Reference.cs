//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AdministrativeClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDto", Namespace="http://schemas.datacontract.org/2004/07/UserABM")]
    [System.SerializableAttribute()]
    public partial class UserDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string nicknameField;
        
        private string photoPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string nickname {
            get {
                return this.nicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.nicknameField, value) != true)) {
                    this.nicknameField = value;
                    this.RaisePropertyChanged("nickname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string photoPath {
            get {
                return this.photoPathField;
            }
            set {
                if ((object.ReferenceEquals(this.photoPathField, value) != true)) {
                    this.photoPathField = value;
                    this.RaisePropertyChanged("photoPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScoreDto", Namespace="http://schemas.datacontract.org/2004/07/ScoreService")]
    [System.SerializableAttribute()]
    public partial class ScoreDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AdministrativeClient.ServiceReference.Role RolePlayedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNicknameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Points {
            get {
                return this.PointsField;
            }
            set {
                if ((this.PointsField.Equals(value) != true)) {
                    this.PointsField = value;
                    this.RaisePropertyChanged("Points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AdministrativeClient.ServiceReference.Role RolePlayed {
            get {
                return this.RolePlayedField;
            }
            set {
                if ((this.RolePlayedField.Equals(value) != true)) {
                    this.RolePlayedField = value;
                    this.RaisePropertyChanged("RolePlayed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserNickname {
            get {
                return this.UserNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNicknameField, value) != true)) {
                    this.UserNicknameField = value;
                    this.RaisePropertyChanged("UserNickname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Role", Namespace="http://schemas.datacontract.org/2004/07/GameLogic")]
    public enum Role : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MONSTER = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SURVIVOR = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NEUTRAL = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IWebService")]
    public interface IWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/AddUser", ReplyAction="http://tempuri.org/IWebService/AddUserResponse")]
        void AddUser(AdministrativeClient.ServiceReference.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/AddUser", ReplyAction="http://tempuri.org/IWebService/AddUserResponse")]
        System.Threading.Tasks.Task AddUserAsync(AdministrativeClient.ServiceReference.UserDto user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/DeleteUser", ReplyAction="http://tempuri.org/IWebService/DeleteUserResponse")]
        void DeleteUser(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/DeleteUser", ReplyAction="http://tempuri.org/IWebService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/ModifyUser", ReplyAction="http://tempuri.org/IWebService/ModifyUserResponse")]
        void ModifyUser(string oldNickname, AdministrativeClient.ServiceReference.UserDto modified);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/ModifyUser", ReplyAction="http://tempuri.org/IWebService/ModifyUserResponse")]
        System.Threading.Tasks.Task ModifyUserAsync(string oldNickname, AdministrativeClient.ServiceReference.UserDto modified);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/Get", ReplyAction="http://tempuri.org/IWebService/GetResponse")]
        AdministrativeClient.ServiceReference.UserDto Get(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/Get", ReplyAction="http://tempuri.org/IWebService/GetResponse")]
        System.Threading.Tasks.Task<AdministrativeClient.ServiceReference.UserDto> GetAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetAllUsers", ReplyAction="http://tempuri.org/IWebService/GetAllUsersResponse")]
        AdministrativeClient.ServiceReference.UserDto[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetAllUsers", ReplyAction="http://tempuri.org/IWebService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<AdministrativeClient.ServiceReference.UserDto[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetTopScores", ReplyAction="http://tempuri.org/IWebService/GetTopScoresResponse")]
        AdministrativeClient.ServiceReference.ScoreDto[] GetTopScores();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetTopScores", ReplyAction="http://tempuri.org/IWebService/GetTopScoresResponse")]
        System.Threading.Tasks.Task<AdministrativeClient.ServiceReference.ScoreDto[]> GetTopScoresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetLastMatchLog", ReplyAction="http://tempuri.org/IWebService/GetLastMatchLogResponse")]
        string GetLastMatchLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebService/GetLastMatchLog", ReplyAction="http://tempuri.org/IWebService/GetLastMatchLogResponse")]
        System.Threading.Tasks.Task<string> GetLastMatchLogAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebServiceChannel : AdministrativeClient.ServiceReference.IWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebServiceClient : System.ServiceModel.ClientBase<AdministrativeClient.ServiceReference.IWebService>, AdministrativeClient.ServiceReference.IWebService {
        
        public WebServiceClient() {
        }
        
        public WebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUser(AdministrativeClient.ServiceReference.UserDto user) {
            base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task AddUserAsync(AdministrativeClient.ServiceReference.UserDto user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public void DeleteUser(string nickname) {
            base.Channel.DeleteUser(nickname);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string nickname) {
            return base.Channel.DeleteUserAsync(nickname);
        }
        
        public void ModifyUser(string oldNickname, AdministrativeClient.ServiceReference.UserDto modified) {
            base.Channel.ModifyUser(oldNickname, modified);
        }
        
        public System.Threading.Tasks.Task ModifyUserAsync(string oldNickname, AdministrativeClient.ServiceReference.UserDto modified) {
            return base.Channel.ModifyUserAsync(oldNickname, modified);
        }
        
        public AdministrativeClient.ServiceReference.UserDto Get(string userName) {
            return base.Channel.Get(userName);
        }
        
        public System.Threading.Tasks.Task<AdministrativeClient.ServiceReference.UserDto> GetAsync(string userName) {
            return base.Channel.GetAsync(userName);
        }
        
        public AdministrativeClient.ServiceReference.UserDto[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<AdministrativeClient.ServiceReference.UserDto[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public AdministrativeClient.ServiceReference.ScoreDto[] GetTopScores() {
            return base.Channel.GetTopScores();
        }
        
        public System.Threading.Tasks.Task<AdministrativeClient.ServiceReference.ScoreDto[]> GetTopScoresAsync() {
            return base.Channel.GetTopScoresAsync();
        }
        
        public string GetLastMatchLog() {
            return base.Channel.GetLastMatchLog();
        }
        
        public System.Threading.Tasks.Task<string> GetLastMatchLogAsync() {
            return base.Channel.GetLastMatchLogAsync();
        }
    }
}
